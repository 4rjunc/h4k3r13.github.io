import type { Container, IDelta, IParticleUpdater, IParticlesOptions, Particle, ParticlesOptions, RecursivePartial } from "tsparticles-engine";
import type { ILife } from "./Options/Interfaces/ILife";
import { Life } from "./Options/Classes/Life";
interface IParticleLife {
    delay: number;
    delayTime: number;
    duration: number;
    time: number;
    count: number;
}
declare type ILifeParticlesOptions = IParticlesOptions & {
    life?: ILife;
};
declare type LifeParticlesOptions = ParticlesOptions & {
    life?: Life;
};
declare type LifeParticle = Particle & {
    life?: IParticleLife;
    options: LifeParticlesOptions;
};
export declare class LifeUpdater implements IParticleUpdater {
    private readonly container;
    constructor(container: Container);
    init(particle: LifeParticle): void;
    isEnabled(particle: Particle): boolean;
    update(particle: LifeParticle, delta: IDelta): void;
    loadOptions(options: LifeParticlesOptions, ...sources: (RecursivePartial<ILifeParticlesOptions> | undefined)[]): void;
}
export {};
